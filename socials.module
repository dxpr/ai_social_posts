<?php

use Drupal\Core\Url;

/**
 * @file
 * Contains Drupal\socials\socials.module.
 */

/**
 * @defgroup socials Example: Content Entity
 * @ingroup examples
 * @{
 * Implement a content entity.
 *
 * This module demonstrates implementing a content entity.
 *
 * Entity API is the API that stores pieces of content and configuration for
 * Drupal core. For instance, if you've encountered node content types, you've
 * encountered entities of type 'node.'
 *
 * This example implements the Entity API so that we have an entity type usable
 * by the user which you might think of as specialized nodes, but which are
 * different from nodes. These entities are called SocialPost, and are known
 * internally by the machine name social_post.
 *
 * SocialPost is a fieldable content entity used to hold structured information
 * without the overhead of using a node content type. 'Fieldable' means you can
 * attach fields to it, like you can with nodes. It is defined programmatically
 * (completely in code). We will show the main techniques to handle and expose
 * the contents of this entity type.
 *
 * The SocialPost entity will demonstrate the main tasks for an entity:
 * - define
 * - save
 * - load
 * - view
 * - edit
 * - delete
 * - control access
 *
 * Where ever possible, we use the amazing tools built into D8 natively.
 *
 * @see Drupal\socials\Entity\SocialPost
 * @see config_entity_example
 * }
 */

/**
 * Implements hook_theme().
 */
function socials_theme() {
  return [
    'socials_node_social_posts' => [
      'variables' => [
        'node' => NULL,
        'form' => NULL,
        'posts' => NULL,
      ],
    ],
    'social_posts_overview' => [
      'variables' => [
        'node' => NULL,
      ],
    ],
    'social_posts_bundle_tab' => [
      'variables' => [
        'node' => NULL,
        'social_posts' => NULL,
        'bundle' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function socials_menu_local_tasks_alter(&$data, $route_name) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node) {
    return;
  }

  // Add the main Social Posts tab
  $data['tabs'][0]['socials.node.social_posts'] = [
    '#theme' => 'menu_local_task',
    '#link' => [
      'title' => t('Social Posts'),
      'url' => Url::fromRoute('socials.node.social_posts', [
        'node' => $node->id(),
      ]),
      'localized_options' => [],
    ],
    '#weight' => 100,
  ];

  // Only show bundle tabs if we're in the social posts section
  if (strpos($route_name, 'socials.node.') === 0) {
    // Get all social post types and add their tabs
    $post_type_manager = \Drupal::service('socials.post_type_manager');
    $weight = 0;
    foreach ($post_type_manager->getTypes() as $type) {
      $bundle_route_name = "socials.node.{$type->id()}_posts";
      $data['tabs'][1][$bundle_route_name] = [
        '#theme' => 'menu_local_task',
        '#link' => [
          'title' => $type->label(),
          'url' => Url::fromRoute($bundle_route_name, [
            'node' => $node->id(),
          ]),
          'localized_options' => [],
        ],
        '#weight' => $weight++,
        '#active' => $route_name === $bundle_route_name,
      ];
    }
  }
}

/**
 * @} End of "defgroup socials".
 */